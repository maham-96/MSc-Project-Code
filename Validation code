# -*- coding: utf-8 -*-
"""
Created on Wed Aug 12 11:59:00 2020

@author: maham_000
"""


import re

with open("C:\\Users\\maham_000\\OneDrive\\bioinformatics\\MSc Project\\TXT\\possible domains.txt","r") as f:
    antibodyformat = f.read()
    

def splitter(stringformat):
    
#Splitting at chain at | 
    global chain
    chain = stringformat.split("|")
    print(chain)
    
    
    for i in  range(len(chain)):
        domain.append(chain[i].split("-"))
    
    
    print(domain)
    return chain
#To split the string



def validator(domain):
    for i in range(len(domain)):
        for x in range(len(domain[i])):
            
            
        
        #Domain validity    
            exisitingDomain = '^(\s*VL|\s*CL|\s*VH|\s*CH1|\s*H|\s*CH2|\s*CH3|\s*CH4|\s*L|\s*X)' #\s* ignores any whitespaces 
            domainmatch = re.match(exisitingDomain,domain[i][x], re.IGNORECASE)
            print(domain[i][x])
            if domainmatch:
                print('Valid Domain')
            else:
                print('Invalid Domain')
                
     
        #specificity validity  
            specificity = '(VL\.[a-z]|CL\.[a-z]|VH\.[a-z]|CH1\.[a-z]|CH3\.[a-z]|CH4\.[a-z]|L\.[a-z]|X\.[a-z])'
            specificitymatch =  re.search(specificity,domain[i][x], re.IGNORECASE)
            
            if specificitymatch:
                  print('Valid Specificity')
                  
            else:
                print('Invalid Specificity')
                
  
              
'''              
        #Id and interaction validity       
            id_interaction = '(\([1-9][0-9]?|100)\W([1-9][0-9]?|100+)\)*'
            id_only = '(\([1-9][0-9]?|100)\)'
            idmatch =  re.compile('(%s|%s)' % (id_interaction,id_only)).findall(y[i])
            
            if idmatch:
                  print('Valid Identifier or Valid Identifier and interaction(s)')
                  
            else :
                  print('Invalid Identifier or invalid Identifier and interaction(s)')
                  
                              
        #Hinge region disulphide validity        
            hinge = '(H\([1-9][0-9]?|100)\W([1-9][0-9]?|100+)\)*'
            disulphide = '(\{[1-2]}\)'
            match =  re.compile('(%s|%s)' % (hinge, disulphide)).findall(y[i])
             
            if match:
                      print('Valid Hinge and disulphide bond')
                      
            else :
                     print('Invalid Hinge and disulphide bond')
'''
domain = []
splitter(antibodyformat)                   
validator(domain)       
          
