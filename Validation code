
import re
import os, sys
from collections import defaultdict
path = os.path.dirname(sys.argv[0])


f = open(".txt","r")
antibodydescriptor = f.read()

interactiondict = {}
interactions_match =[]


# Removing any spaces  between domains and chains

removespace = re.compile(r'\s+')
antibodydescriptor = re.sub(removespace, '', antibodydescriptor)

# Splitting string at | and -
chains = antibodydescriptor.split("|")
counter_nonvalid = 0
domains = []
for chain in chains:
    domainSplit = chain.split("-")
    domains.append(domainSplit)
    
for domain in domains:
    for eachdomain in domain:

       
# Domains without specificity 
        
        domaintype = '(CL|CH1|H|CH2|CH4|L|X)[@+>_!*]?(((?:\([1-9][0-9]?\))?|(?:\([1-9][0-9]?\:[1-9][0-9]?\))?|(?:\([1-9][0-9]?\:[1-9][0-9]?,([1-9][0-9]*,)*[1-9][0-9]?\))?(((?:\([1-9][0-9]?\:[1-9][0-9]?\)(\{[12]\}))?))?|(?:\([1-9][0-9]?\:[1-9][0-9]?,([1-9][0-9]*,)*[1-9][0-9]?\)(\{[12]\}))?))?((\[ANTI\:(CD3|[a-z-0-9_ ]*)\])?(\[MOD\:(ENHANCE FCRN|STRAND EXCHANGE ENGINEERED DOMAIN|[a-z-0-9_ ]*)\])?(\[TYPE\:(ZIPPER|FUSION|[a-z]*)\])?(\[LENGTH\:([1-9][0-9]*)\])?(\[NOTE\:(.+|[a-z]*\]))?)$'
                     #     DOMAIN NAME      //  MOD  //       (n)          //            (n:n1)               //                    (n:n1,n2....nth)                      //               (n:n1){disulphide}              //                       (n:n1,n2....nth)(n:n1){disulphide}              //                                                                  COMMENTS: ANTI, MOD, TYPE, LENGTH, NOTE..                                                                                    //
        validmatch = re.fullmatch(domaintype, eachdomain, re.IGNORECASE)
          
          
# Domains with specificity
        
        domainspecificity = '(VL|VH|VH1|VH2|CH3)[@+>_!*]?(\.[a-z]*)?(((?:\([1-9][0-9]?\))?|(?:\([1-9][0-9]?\:[1-9][0-9]?\))?|(?:\([1-9][0-9]?\:[1-9][0-9]?,([1-9][0-9]*,)*[1-9][0-9]?\))?(((?:\([1-9][0-9]?\:[1-9][0-9]?\)(\{[12]\}))?))?|(?:\([1-9][0-9]?\:[1-9][0-9]?,([1-9][0-9]*,)*[1-9][0-9]?\)(\{[12]\}))?))?((\[ANTI\:(CD3|[a-z-0-9_ ]*)\])?(\[MOD\:(ENHANCE FCRN|STRAND EXCHANGE ENGINEERED DOMAIN|[a-z-0-9_ ]*)\])?(\[TYPE\:(ZIPPER|FUSION|[a-z]*)\])?(\[LENGTH\:([1-9][0-9]*)\])?(\[NOTE\:(.+|[a-z]*\]))?)$'
                        #     DOMAIN NAME     //  MOD // SPECIFICITY //     (n)          //            (n:n1)               //                    (n:n1,n2....nth)                      //               (n:n1){disulphide}              //                       (n:n1,n2....nth)(n:n1){disulphide}              //                                                                  COMMENTS: ANTI, MOD, TYPE, LENGTH, NOTE..                                                                                    //
        validmatchspec = re.fullmatch(domainspecificity, eachdomain, re.IGNORECASE)
        
        if  validmatch or validmatchspec:
            
# Checking if domain interactions match, eng: (1:2,3) and (2:3,1) or (1:2) and (2:1)

            interactions= '(?:[1-9][0-9]?\:[1-9][0-9]?,([1-9][0-9]*,)*[1-9][0-9]?)|([1-9][0-9]?\:[1-9][0-9]?)'
            interactionmatch = re.search(interactions, eachdomain, re.IGNORECASE) 
        
     
# If interactionmatch: store matches into a list
            if interactionmatch:
                interactions_match.append(interactionmatch.group(0))
                
                     
                
# Creating key with empty values
                interactiondict = defaultdict(list)
                
# Creating list to store keys and values by splitting at : or and ,
                interaction_Split = []
              
# Storing the key with values
                for _ in range(len(interactions_match)):
                    interaction_Split.append(re.split(':|,',interactions_match[_]))
                    
                    if len(interaction_Split[_]) >= 3:
                        counter = 1
                        for x in range(len(interaction_Split[_])-1):
                            interactiondict[(interaction_Split[_][0])].append(interaction_Split[_][counter])
                            counter+=1
                    else:
                        interactiondict[(interaction_Split[_][0])].append(interaction_Split[_][1])
                            
        else:
            counter_nonvalid += 1
            print(eachdomain+' is an invalid domain')
     

#checking if keys and values in dictionary match
for k,v in interactiondict.items():
    
    domainnumber = str(k)
    interactionnumber= interactiondict[domainnumber]
    
    
    for _ in range(len(interactiondict[domainnumber])):
       if interactionnumber[_] in interactiondict.keys():   #if interaction number exists as a domain number

           if domainnumber in interactiondict[interactionnumber[_]]  :  #if exist then checks if domain number exists as interction number
               pass
           else:
               counter_nonvalid += 1  #if it does not exist
               print('Invalid')
               print('The domain number: '+domainnumber+' does not exist as an interaction number')
               for domain in domains:
                   for eachdomain in domain:
                       if (domainnumber or interactionnumber[_])  in eachdomain:
                           print(eachdomain)
           
           
       else: #if interaction number does not exist as domain number then 
           counter_nonvalid += 1
           print('The domain number: '+domainnumber+' does not exist as an interaction')
           print('The interaction: '+interactionnumber[_]+  ' does not exist as a domain number')
           for domain in domains:
               for eachdomain in domain:
                   if (domainnumber or interactionnumber[_])  in eachdomain:
                       print(eachdomain)
           
              
if counter_nonvalid == 0:
    print('The string is valid')
              
          
