# -*- coding: utf-8 -*-

import re
import os, sys
path = os.path.dirname(sys.argv[0])


f = open("antibody.txt","r")
antibodydescriptor = f.read()

removespace = re.compile(r'\s+')
antibodydescriptor = re.sub(removespace, '', antibodydescriptor)


chains = antibodydescriptor.split("|")

domains = []
for chain in chains:
    domainSplit = chain.split("-")
    domains.append(domainSplit)

dict1 = {}
interactionss =[]
from collections import defaultdict
for domain in domains:
    for eachdomain in domain:
        print(eachdomain)
        
        
      
        domaintype1 = '(CL|CH1|H|CH2|CH4|L|X)[@+>_!*]?(?:\([1-9][0-9]?\:[1-9][0-9]?\))?'
                     #-----DOMAIN NAME------/---MOD--/--------(n)--------/-----------(n:n1)---------------/--------------(n:n1,n2....nth)-----------------------------/---------------(n:n1){disulphide}---------/-------------   
                               
        validmatch1 = re.search(domaintype1, eachdomain, re.IGNORECASE)

        domaintype2 = '(?:[1-9][0-9]?\:[1-9][0-9]?,([1-9][0-9]*,)*[1-9][0-9]?)'
                     #-----DOMAIN NAME------/---MOD--/--------(n)--------/-----------(n:n1)---------------/--------------(n:n1,n2....nth)-----------------------------/---------------(n:n1){disulphide}---------/-------------   
                               
        interactions = re.search(domaintype2, eachdomain, re.IGNORECASE) 
        #print(interactions)
        
        #if interactionmatch: # "if match was successful" / "if matched"
        interactionss.append(interactions.group(0).split(":"))
        #creating key with empty values
        dict1 = defaultdict(list)
        #now storing the key with values
        for _ in range(len(interactionss)):
            if len(interactionss[_][1]) >= 3:
                counter = 0
                for x in range(len(interactionss[_][1])-1):
                    dict1[(interactionss[_][0])].append(interactionss[_][1][counter])
                    counter+=2
            else:
                dict1[(interactionss[_][0])].append(interactionss[_][0])
 
    
        if  validmatch1:
            print('valid')

for k,v in dict1.items():
    
    orginal_Key = str(k)
    new_Keys= dict1[orginal_Key]
    
    
    for _ in range(len(dict1[orginal_Key])):
       if new_Keys[_] in dict1.keys():
           #print(dict1[new_Keys[_]])
           if orginal_Key in dict1[new_Keys[_]]  :
               pass
           else:
               print('Invalid')
               print('The orignal Key: '+orginal_Key+' is missing from the second key')
           
       else:
           print('For Key: '+orginal_Key+' we cannot find one of the values as a key')
           print('Missing Value that does not exist as a key is: ' + new_Keys[_])
           

